# We will work with the abalone data set ...
library(readr)
abalone <- read_csv("C:/knot4u/UTD/6301/Lecture Material/Datasets/Lecture-15-Data/abalone.data")
View(abalone)
summary(abalone)
abalone$Sex=as.factor(abalone$Sex)
summary(abalone)
# We have a factor predictor, and we need all numerics ...
myData = abalone[which(abalone$Sex == 'M'),]
summary(myData)
attach(myData)
plot(VWGHT~Diameter)
# Looks fairly nonlinear ...
library("splines", lib.loc="C:/Program Files/R/R-3.3.2/library")
# Here we fit a spline with prescribed knots
fit.spline = lm(VWGHT~bs(Diameter, knots=c(.2, .4, .5)), data=myData)
summary(fit.spline)
# Notice we used the usual lm function here
# We'd like to plot the spline, but the usual prediction function
# needs to be given some specific data points to do this
diamLims=range(Diameter)
diamLims
diamLims = diamLims*100
diam.grid=seq(diamLims[1],diamLims[2])
diam.grid
diam.grid = diam.grid/100
# Gives us 100 x values to plot the spline
pred = predict(fit.spline,newdata = list(Diameter=diam.grid),se=T)
lines(diam.grid,pred$fit,lwd=2,col="red")
# We can also specify the degrees of freedom and let R find the knots
fit.spline_2 = lm(VWGHT~bs(Diameter, df=6), data=myData)
pred_2 = predict(fit.spline_2,newdata = list(Diameter=diam.grid))
lines(diam.grid,pred_2,lwd=2,col="blue")
attr(bs(Diameter,df=6), "knots")
# We'll now demonstrate the use of GAMs for the air quality dataset
summary(airquality)
myData = airquality
myData$Month = NULL
myData$Day = NULL
summary(myData)
myData = na.omit(myData)
plot(myData)
# First we do a simple linear fit
fit.linear = lm(Ozone~., data=myData)
summary(fit.linear)
# No we fit a model using splines for three predictors
library("gam", lib.loc="~/R/win-library/3.3")
fit.gam = gam(Ozone~s(Solar.R) + s(Wind)+s(Temp), data=myData)
summary(fit.gam)
plot(fit.gam)
# We'll use a simple CV to compare the models
dim(myData)
train = sample(111,75)
fit.linear = lm(Ozone~., data=myData, subset = train)
fit.gam = gam(Ozone~s(Solar.R)+s(Wind)+s(Temp), data=myData, subset=train)
# Compare test MSEs
mean((myData[-train,1] - predict(fit.linear, newdata = myData[-train,]))^2)
mean((myData[-train,1] - predict(fit.gam, newdata = myData[-train,]))^2)
# Next we will look at concrete strength again ...
library(readr)
Concrete_Data_Tab <- read_delim("C:/knot4u/UTD/6301/Lecture Material/Datasets/Lecture-15-Data/Concrete_Data_Tab.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Concrete_Data_Tab)
summary(Concrete_Data_Tab)
attach(Concrete_Data_Tab)
# Fly Ash appears questionable ...
plot(compressivestrength~FlyAsh)
fit.linear = lm(compressivestrength~. -FlyAsh, data=Concrete_Data_Tab)
summary(fit.linear)
# Seems like all remaining variables are significant
dim(Concrete_Data_Tab)
train = sample(1030, 700)
# One annoying thing about GAMs - need to write out all variables
names(Concrete_Data_Tab)
# We need to change the name of one column
colnames(Concrete_Data_Tab)[7]="FineAggregate"
fit.gam = gam(compressivestrength~ s(Cement) + s(BlastFurnaceSlag) + s(Superplasticizer) + s(CoarseAggregate) + s(FineAggregate) + s(Age), data=Concrete_Data_Tab, subset=train)
fit.linear = lm(compressivestrength~. -FlyAsh, data=Concrete_Data_Tab, subset=train)
mean((Concrete_Data_Tab[-train,9] - predict(fit.linear, newdata = Concrete_Data_Tab[-train,]))^2)
mean((Concrete_Data_Tab[-train,9] - predict(fit.gam, newdata = Concrete_Data_Tab[-train,]))^2)
savehistory("C:/knot4u/UTD/6301/Lecture Material/R Scripts/Lecture-15.Rhistory")
